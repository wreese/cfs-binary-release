syntax = "proto3";

package proto;


service Syndicate {
    rpc AddNode(Node) returns (RingStatus) {}
    rpc RemoveNode(Node) returns (RingStatus) {}
    rpc ModNode(ModifyMsg) returns (RingStatus) {}
    rpc SetConf(Conf) returns (RingStatus) {}
    rpc SetActive(Node) returns (RingStatus) {}
    rpc SetCapacity(Node) returns (RingStatus) {}
    rpc ReplaceAddresses(Node) returns (RingStatus) {}
    rpc ReplaceTiers(Node) returns (RingStatus) {}
    rpc GetVersion(EmptyMsg) returns (RingStatus) {}
    rpc GetGlobalConfig(EmptyMsg) returns (RingConf) {}
    rpc GetNodeConfig(Node) returns (RingConf) {}
    rpc SearchNodes(Node) returns (SearchResult) {}
    rpc GetRing(EmptyMsg) returns (Ring) {}
    rpc GetRingStream(SubscriberID) returns (stream Ring) {}
    rpc RegisterNode(RegisterRequest) returns (NodeConfig) {}
}

message EmptyMsg {}

message RingStatus {
    bool status = 1;
    int64 version = 2;
}

message Node {
    uint64 id = 1;
    bool active = 2;
    uint32 capacity = 3;
    repeated string tiers = 4;
    repeated string addresses = 5;
    string meta = 6;
    bytes conf = 7;
}

message ModifyMsg {
    string key = 1;
    string value = 2;
    uint64 id = 3;
}

message RingConf {
    RingStatus status = 1;
    Conf conf = 2;
}

message Conf {
    bytes conf = 1;
    bool  restartRequired = 2;
}

message SubscriberID {
    string id = 1;
}

message RegisterRequest {
    string hostname = 1;
    repeated string addrs = 2;
    repeated string tiers = 3;
    HardwareProfile hardware = 4;
}

message HardwareProfile {
    uint64 memtotal = 1;
    uint64 memfree = 2;
    int64 cpus = 3;
    repeated Disk disks = 4;
}

message Disk {
    string device = 1;
    string path = 2;
    uint64  size = 3;
    uint64  used = 4;
}

message NodeConfig {
    uint64 localid = 1;
    bytes ring = 2;
}

message Ring {
    int64 version = 1;
    bytes ring = 2;
}

message SearchResult {
    repeated Node nodes = 1;
}



service RingDist {
    rpc Store(RingMsg) returns (StoreResult) {}
    rpc Revert(RingMsg) returns (StoreResult) {}
    rpc Status(StatusRequest) returns (StatusMsg) {}
    rpc Setup(RingMsg) returns (StoreResult) {}
}

message RingMsg {
    int64 version = 1;
    bytes ring = 2;
    bytes builder = 3;
    int64 deadline = 4; //not used right now
    int64 rollback = 5; //not used right now
}

message StoreResult {
    int64 version = 1;
    bool ring = 2;
    bool builder = 3;
    string ErrMsg = 4;
}

message StatusRequest {
    bool ring = 1;
    bool builder = 2;
}

message StatusMsg {
    int64 version = 1;
    string ringstats = 2;
    string builderstats = 3;
    string master = 4;
}
